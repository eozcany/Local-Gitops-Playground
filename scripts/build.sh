#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<USAGE
Build the demo application image inside the Minikube Docker daemon.

Usage: $0 [--tag <image-tag>]
       $0 [-t <image-tag>]

Options:
  -t, --tag <image-tag>  Tag to use for the built image. Defaults to a timestamp.
  -h, --help             Show this help message

Examples:
  $0                      # builds nginx-demo:<timestamp>
  $0 --tag 1.1.0          # builds nginx-demo:1.1.0

After building, update staging (via ArgoCD UI/CLI or kubectl), then use:
  ./scripts/promote.sh -e prod            # copy staging into production
  ./scripts/promote.sh -e staging -t TAG  # update staging explicitly
  ./scripts/rollback.sh -e <env> [...]    # roll back when required
USAGE
}

TAG=""

while [ $# -gt 0 ]; do
  case "$1" in
    -t|--tag)
      shift
      [ $# -gt 0 ] || { echo "--tag requires a value" >&2; exit 1; }
      TAG="$1"
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown argument: $1" >&2
      usage >&2
      exit 1
      ;;
  esac
  shift
done

if [ -z "$TAG" ]; then
  TAG="$(date +%Y%m%d%H%M%S)"
  echo "No tag supplied. Using autogenerated tag: $TAG"
fi

REPO_ROOT="$(cd "$(dirname "$0")/.." && pwd)"

echo "=== Switching Docker context to Minikube"
eval "$(minikube -p minikube docker-env)"

echo "=== Building nginx-demo:$TAG"
docker build -t "nginx-demo:$TAG" "$REPO_ROOT/app"

echo
cat <<SUMMARY
Build complete.

Next steps:
  1. Update staging to use the new tag (choose one):
       kubectl -n argocd patch application nginx-staging \
         --type merge \
         -p '{"spec":{"source":{"helm":{"parameters":[{"name":"image.repository","value":"nginx-demo"},{"name":"image.tag","value":"$TAG"}]}}}}'
       # or use the ArgoCD UI / CLI to set image.tag=$TAG
  2. Wait for staging to sync, then promote:
       ./scripts/promote.sh -e prod
       # or ./scripts/promote.sh -e prod --tag $TAG
  3. If needed, roll back:
       ./scripts//promote.sh -e prod --tag <previous-tag>
SUMMARY
